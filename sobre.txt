Â  Â VisÃ£o Geral do Projeto: ToaruFlix
DescriÃ§Ã£o do Projeto
ToaruFlix Ã© uma aplicaÃ§Ã£o web moderna, concebida como um clone da Netflix, dedicada exclusivamente ao universo de animes "Toaru" (A Certain Magical Index, A Certain Scientific Railgun, etc.). O objetivo Ã© oferecer aos fÃ£s uma experiÃªncia de streaming imersiva e personalizada, permitindo que naveguem, assistam e acompanhem seu progresso na franquia.

A aplicaÃ§Ã£o utiliza tecnologias de ponta, incluindo React para a construÃ§Ã£o da interface de usuÃ¡rio dinÃ¢mica e reativa, e Firebase como backend completo, gerenciando a autenticaÃ§Ã£o de usuÃ¡rios, o armazenamento de dados no Firestore (perfis, histÃ³rico de visualizaÃ§Ã£o) e a seguranÃ§a de acesso.

Funcionalidades Principais:
AutenticaÃ§Ã£o Segura: Sistema de login e cadastro com E-mail/Senha e Google, gerenciado pelo Firebase Auth.

Perfis de UsuÃ¡rio: Suporte para mÃºltiplos perfis por conta, similar Ã  Netflix, permitindo uma experiÃªncia individualizada.

Dashboard DinÃ¢mica: ExibiÃ§Ã£o dos animes em fileiras (rows) por categoria e uma seÃ§Ã£o "Continuar Assistindo" que salva o progresso do usuÃ¡rio.

Player de VÃ­deo Integrado: Um player de vÃ­deo funcional que salva automaticamente o progresso do episÃ³dio no Firestore.

Roteamento Protegido: Acesso ao conteÃºdo principal restrito apenas a usuÃ¡rios autenticados e com perfil selecionado.

Estrutura de Arquivos e FunÃ§Ãµes
A tabela abaixo detalha a responsabilidade de cada arquivo e pasta no projeto.

Arquivo / Pasta

FunÃ§Ã£o

DescriÃ§Ã£o

ğŸ“‚ src

CÃ³digo-Fonte

Pasta principal que contÃ©m todo o cÃ³digo da aplicaÃ§Ã£o React.

ğŸ“‚ api

ComunicaÃ§Ã£o Externa

Centraliza a lÃ³gica para buscar dados de fontes externas (APIs).

ğŸ“„ api/animes.js

Busca de Animes

ContÃ©m as funÃ§Ãµes fetch para buscar a lista geral de animes e as listas de episÃ³dios dos seus arquivos JSON hospedados.

ğŸ“‚ components

Componentes ReutilizÃ¡veis

ContÃ©m os blocos de construÃ§Ã£o da interface, organizados por contexto.

ğŸ“„ components/Header.jsx

CabeÃ§alho

O cabeÃ§alho de navegaÃ§Ã£o que aparece no topo das pÃ¡ginas principais.

ğŸ“„ components/Footer.jsx

RodapÃ©

O rodapÃ© que aparece no final das pÃ¡ginas.

ğŸ“‚ components/Browse

Componentes da Dashboard

Componentes especÃ­ficos para a tela principal de navegaÃ§Ã£o (/browse).

ğŸ“„ Browse/Hero.jsx

Banner Principal

Exibe o anime em destaque na dashboard, com imagem de fundo e logo.

ğŸ“„ Browse/AnimeRow.jsx

Fileira de Animes

Componente que cria uma fileira horizontal de animes (ex: "Em Alta", "AÃ§Ã£o").

ğŸ“„ Browse/AnimeCard.jsx

Card de Anime

O card individual de um anime que aparece nas fileiras.

ğŸ“‚ components/shared

Componentes GenÃ©ricos

Componentes que podem ser usados em qualquer lugar da aplicaÃ§Ã£o.

ğŸ“„ shared/Spinner.jsx

Indicador de Carregamento

AnimaÃ§Ã£o exibida enquanto os dados estÃ£o sendo carregados.

ğŸ“„ shared/Logo.jsx

Logo da AplicaÃ§Ã£o

O logo "ToaruFlix" que tambÃ©m funciona como um link para a home.

ğŸ“‚ contexts

Estado Global

Gerencia o estado que precisa ser compartilhado entre mÃºltiplos componentes.

ğŸ“„ contexts/AuthContext.jsx

Contexto de AutenticaÃ§Ã£o

Fornece informaÃ§Ãµes sobre o usuÃ¡rio logado (quem Ã©, se estÃ¡ carregando, qual perfil foi selecionado) para toda a aplicaÃ§Ã£o.

ğŸ“‚ firebase

ConfiguraÃ§Ã£o do Firebase

Arquivos relacionados Ã  inicializaÃ§Ã£o e configuraÃ§Ã£o do Firebase.

ğŸ“„ firebase/config.js

InicializaÃ§Ã£o do Firebase

Inicializa e exporta as instÃ¢ncias do Firebase Auth e Firestore usando as chaves do arquivo .env.local.

ğŸ“‚ hooks

Hooks Personalizados

FunÃ§Ãµes reutilizÃ¡veis que encapsulam lÃ³gicas complexas (geralmente com estado).

ğŸ“„ hooks/useAuth.js

Hook de AutenticaÃ§Ã£o

Um atalho para acessar facilmente os dados do AuthContext em qualquer componente.

ğŸ“‚ pages

PÃ¡ginas da AplicaÃ§Ã£o

Componentes que representam as telas completas da aplicaÃ§Ã£o (ex: uma rota).

ğŸ“„ pages/Login.jsx

PÃ¡gina de Login

Tela onde o usuÃ¡rio pode entrar ou se cadastrar.

ğŸ“„ pages/Profiles.jsx

PÃ¡gina de Perfis

Tela "Quem estÃ¡ assistindo?", onde o usuÃ¡rio escolhe seu perfil.

ğŸ“„ pages/Browse.jsx

PÃ¡gina de NavegaÃ§Ã£o

A dashboard principal, que exibe o Hero e as AnimeRow.

ğŸ“„ pages/Player.jsx

PÃ¡gina do Player

Tela que contÃ©m o player de vÃ­deo para assistir aos episÃ³dios.

ğŸ“„ App.js

Roteador Principal

Define todas as rotas da aplicaÃ§Ã£o (/login, /browse, etc.) e implementa a lÃ³gica de rotas protegidas.

ğŸ“„ index.js

Ponto de Entrada

O primeiro arquivo a ser executado. Ele renderiza o componente App na pÃ¡gina HTML.

ğŸ“„ .env.local

VariÃ¡veis de Ambiente

Arquivo secreto (nÃ£o deve ir para o GitHub) que armazena suas chaves de API do Firebase de forma segura.

ğŸ“„ package.json

Manifesto do Projeto

Lista todas as dependÃªncias do projeto (React, Firebase, etc.) e os scripts (como npm start).

